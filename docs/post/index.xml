<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on David Liman</title>
    <link>https://dvliman.github.io/post/</link>
    <description>Recent content in Posts on David Liman</description>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Aug 2024 06:00:00 +0000</lastBuildDate>
    <atom:link href="https://dvliman.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My handy Clojure debugging tools</title>
      <link>https://dvliman.github.io/post/my-handy-clojure-debugging-tools/</link>
      <pubDate>Mon, 26 Aug 2024 06:00:00 +0000</pubDate>
      <guid>https://dvliman.github.io/post/my-handy-clojure-debugging-tools/</guid>
      <description>&lt;p&gt;In this blog post, I’d like to share how my debugging tools for Clojure have evolved over the past years. Let&amp;rsquo;s start with each tool&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;(println …)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is the most versatile technique. There is no learning curve. Focus on tapping at the right places, make the assertions, and move on. The only downside would be there is quite a lot of typing and undo-ing after the fact&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;(defn x [x] (println x) x)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Don&#39;t use clj-time, use clojure.java-time instead</title>
      <link>https://dvliman.github.io/post/dont-use-clj-time-use-clojurejava-time-instead/</link>
      <pubDate>Wed, 10 Jan 2024 06:00:00 +0000</pubDate>
      <guid>https://dvliman.github.io/post/dont-use-clj-time-use-clojurejava-time-instead/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I was trying out different blogging platform&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Link to: &lt;a href=&#34;https://dvliman.bearblog.dev/dont-use-clj-time-use-clojurejava-time-instead/&#34;&gt;https://dvliman.bearblog.dev/dont-use-clj-time-use-clojurejava-time-instead/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Live Streaming app in Clojure</title>
      <link>https://dvliman.github.io/post/livestreaming-clojure/</link>
      <pubDate>Mon, 28 Feb 2022 06:00:00 +0000</pubDate>
      <guid>https://dvliman.github.io/post/livestreaming-clojure/</guid>
      <description>&lt;p&gt;I want to echo &lt;a href=&#34;https://twitter.com/ID_AA_Carmack&#34;&gt;John Carmack&lt;/a&gt;’s &lt;a href=&#34;https://twitter.com/ID_AA_Carmack/status/1258531455220609025&#34;&gt;tweet that all giant companies use open-source FFmpeg in the backends&lt;/a&gt;. &lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt; is a core piece of technology that powers our live-streaming and recording system at Inspire Fitness. It certainly is high-quality open-source software that we use to record and stream countless hours of workout videos.&lt;/p&gt;
&lt;p&gt;It looks like this:
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/dvliman/dvliman.github.io/master/resources/public/images/live-sessions.png&#34;
         alt=&#34;live sessions&#34; width=&#34;296&#34; height=&#34;640&#34;/&gt; 
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/dvliman/dvliman.github.io/master/resources/public/images/session-detail.png&#34;
         alt=&#34;session detail&#34; width=&#34;296&#34; height=&#34;640&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;users-can&#34;&gt;Users can:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;watch live-streaming content, or&lt;/li&gt;
&lt;li&gt;playback on-demand videos from our content library&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;high-level&#34;&gt;High level&lt;/h1&gt;
&lt;p&gt;Behind the scene, we have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a reactive web service with Spring Webflux, Kotlin, and PostgreSQL</title>
      <link>https://dvliman.github.io/post/spring-webflux-kotlin-postgresql/</link>
      <pubDate>Sun, 24 Mar 2019 09:00:00 +0000</pubDate>
      <guid>https://dvliman.github.io/post/spring-webflux-kotlin-postgresql/</guid>
      <description>&lt;p&gt;This post shows how to create a reactive web service with Spring Webflux, Kotlin, PostgreSQL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the context,&lt;a href=&#34;https://spring.io/&#34;&gt;Spring Framework 5&lt;/a&gt; introduced the so-called &lt;strong&gt;Reactive Stack&lt;/strong&gt;. The keyword &lt;code&gt;reactive&lt;/code&gt; refers to the &lt;a href=&#34;https://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt;, which is a &lt;a href=&#34;https://github.com/reactive-streams/reactive-streams-jvm/blob/master/README.md&#34;&gt;specification&lt;/a&gt; for asynchronous stream processing with non-blocking back-pressure.
This specification is a joint collaboration between engineers from Netflix, Pivotal, Red Hat, Twitter and many others. It has been implemented in many languages such as: Java, Javascript, Swift, NET, etc.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
